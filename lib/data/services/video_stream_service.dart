import 'dart:async';
import 'dart:math';

import 'package:depron_app/data/models/grid_analysis_model.dart';
import 'package:flutter/material.dart';

// ğŸ’¡ Bu sÄ±nÄ±f, IP kamera baÄŸlantÄ±sÄ±nÄ± yÃ¶netir, video akÄ±ÅŸÄ±nÄ± simÃ¼le eder
// ve gerÃ§ek zamanlÄ± analiz verilerini (belirli sÄ±nÄ±flara ayrÄ±lmÄ±ÅŸ) DataService'e iletir.
class VideoStreamService extends ChangeNotifier {
  // ----------------------------------------------------
  // Kamera BaÄŸlantÄ± Durumu
  // ----------------------------------------------------
  bool _isConnected = false;
  bool get isConnected => _isConnected;

  // ğŸ’¡ Gecikme sÃ¼resi (Latency) simÃ¼lasyonu. DÃ¼ÅŸÃ¼k gecikme (Low-Latency) hedeflenir.
  Duration _latency = const Duration(milliseconds: 0);
  Duration get latency => _latency;

  Timer? _analysisTimer;
  final Duration _streamDuration = const Duration(milliseconds: 100); // 10 FPS simÃ¼lasyonu

  // ----------------------------------------------------
  // Veri AkÄ±ÅŸÄ±nÄ± BaÅŸlatma ve Durdurma
  // ----------------------------------------------------

  // ğŸ’¡ Video akÄ±ÅŸÄ±nÄ± baÅŸlatÄ±r ve sahte analiz verilerini dÃ¼zenli olarak gÃ¶nderir.
  void startStream(Function(List<GridAnalysisModel>) onData) {
    if (_isConnected) return;

    _isConnected = true;
    _latency = const Duration(milliseconds: 50); // SimÃ¼lasyon: DÃ¼ÅŸÃ¼k gecikme

    // ğŸ’¡ SÄ±nÄ±f analizi verilerini dÃ¼zenli aralÄ±klarla simÃ¼le et
    _analysisTimer = Timer.periodic(_streamDuration, (timer) {
      if (!_isConnected) {
        timer.cancel();
        return;
      }
      // ğŸ’¡ Yeni bir analiz paketi oluÅŸtur ve DataService'e (onData) gÃ¶nder.
      // Bu, "belirlediÄŸim sÄ±nÄ±flarÄ± (insan, hasar, araÃ§) gÃ¶sterme" mantÄ±ÄŸÄ±nÄ± temsil eder.
      final simulatedGrids = _simulateAnalysisData();
      onData(simulatedGrids);

      // Gecikme sÃ¼resini rastgele gÃ¼ncelle (gerÃ§ekÃ§ilik iÃ§in)
      _updateLatency();
      notifyListeners();
    });

    notifyListeners();
  }

  // ğŸ’¡ Video akÄ±ÅŸÄ±nÄ± durdurur ve baÄŸlantÄ±yÄ± keser.
  void stopStream() {
    if (!_isConnected) return;
    
    _analysisTimer?.cancel();
    _isConnected = false;
    _latency = const Duration(milliseconds: 0);
    notifyListeners();
  }
  
  // ----------------------------------------------------
  // YardÄ±mcÄ± Fonksiyonlar
  // ----------------------------------------------------
  
  // ğŸ’¡ Analiz verilerini simÃ¼le eder (YOLO/AI'dan gelen verilerin yerine geÃ§er)
  List<GridAnalysisModel> _simulateAnalysisData() {
    final random = Random();
    final List<GridAnalysisModel> grids = [];

    // Sahte 10-20 rastgele analiz bÃ¶lgesi oluÅŸtur
    for (int i = 0; i < 15; i++) {
      grids.add(GridAnalysisModel(
        // Rastgele 10 bÃ¶lgenin koordinatlarÄ±nÄ± simÃ¼le et
        latitude: 36.20 + (random.nextDouble() * 0.1) - 0.05,
        longitude: 36.15 + (random.nextDouble() * 0.1) - 0.05,
        
        // Ã–nemli: BelirlediÄŸimiz sÄ±nÄ±flarÄ±n simÃ¼lasyonu
        humanCount: random.nextInt(15), 
        damageLevel: random.nextInt(4), // 0:Yok, 1:Hafif, 2:Orta, 3:AÄŸÄ±r
        vehicleCount: random.nextInt(8),
        
        // SimÃ¼lasyonun benzersiz bir kimliÄŸi (GerÃ§ekte Ã§erÃ§eve (frame) kimliÄŸi olabilir)
        frameId: DateTime.now().millisecondsSinceEpoch.toString(),
      ));
    }
    return grids;
  }

  // ğŸ’¡ Gecikme sÃ¼resini (Latency) gerÃ§ek zamanlÄ± olarak simÃ¼le et
  void _updateLatency() {
    final random = Random();
    // Gecikmeyi 30ms ile 120ms arasÄ±nda rastgele ayarla (dÃ¼ÅŸÃ¼k gecikme)
    int newMs = 30 + random.nextInt(90); 
    _latency = Duration(milliseconds: newMs);
  }

  @override
  void dispose() {
    _analysisTimer?.cancel();
    super.dispose();
  }
}
